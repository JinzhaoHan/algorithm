package bfprt;

import java.util.Arrays;
import java.util.Random;

public class BFPRT {
    public static void main(String[] args) {
        int size = 540;
        int k = size / 3;
        int[] arr =generateRandomArr(size);
        System.out.println("original arr");
        System.out.println(Arrays.toString(arr));
        int num = calBFPRT(arr, 0, arr.length - 1, k);
        System.out.println("after bfprt ");
        System.out.println(Arrays.toString(arr));
        System.out.println("bfprt 结果是" + num);

        System.out.println("排序后的数组是");
        insertSort(arr, 0, arr.length - 1);
        System.out.println(Arrays.toString(arr));
        System.out.println("排序得到的结果是" + arr[k - 1]);
    }


    /**
     * arr left - right范围内第k小的数
     */
    public static int calBFPRT(int[] arr, int l, int r, int k) {

        if (l == r) {
            return arr[l];
        }

        int pivot = medianOfMedians(arr, l, r);
        // 找到中位数的中位数，作为pivot值
        int[] range = partition(arr, l, r, pivot);
        if (k >= range[0] + 1 && k <= range[1] + 1) {
            return pivot;
        } else if (k < range[0] + 1) {
            return calBFPRT(arr, l, range[0] - 1, k);
        } else {
            return calBFPRT(arr, range[1] + 1, r, k);
        }

    }

    public static int medianOfMedians(int[] median, int left, int right) {
        int len = right - left + 1;
        if (len < 5) {
            insertSort(median, left, right);
            return median[(left + right) / 2];
        }
        int offset = len % 5 == 0 ? 0 : 1;

        int groupsCount = len / 5 + offset;
        int[] mArr = new int[groupsCount];
        int idx;
        // 每个组都排序，然后找到中位数，加入medians数组
        for (int i = 0; i < groupsCount; i++) {
            if (i == groupsCount - 1) {
                insertSort(median, left + i * 5, right);
                idx = (left + i * 5 + right) / 2;
            } else {
                insertSort(median, left + i * 5, left + i * 5 + 4);
                idx = left + i * 5 + 2;
            }
            mArr[i] = median[idx];
        }
        return calBFPRT(mArr, 0, groupsCount - 1, groupsCount / 2);

    }

    public static void insertSort(int[] arr, int l, int r) {

        int val;
        for (int i = l + 1; i <= r; i++) {
            val = arr[i];
            if (val < arr[i - 1]) {
                int t = i - 1;
                while (t >= l && arr[t] > val) {
                    arr[t + 1] = arr[t];
                    t--;
                }
                arr[t + 1] = val;
            }
        }
    }


    public static int[] partition(int[] arr, int left, int right, int pivot) {
        if (left == right) {
            return new int[]{left, right};
        }
        int smaller = left - 1;
        int bigger = right + 1;
        int cur = left;
        while (cur < bigger) {
            if (arr[cur] < pivot) {
                swap(arr, cur++, ++smaller);
            } else if (arr[cur] == pivot) {
                cur++;
            } else {
                swap(arr, cur, --bigger);
            }
        }
        return new int[]{smaller + 1, bigger - 1};
    }

    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    public static int[] generateRandomArr(int size) {
        int[] arr = new int[size];
        Random rnd = new Random();
        for (int i = 0; i < size; i++) {
            arr[i] = rnd.nextInt(size * 5);
        }
//        System.out.println(Arrays.toString(arr));
        return arr;
    }
}
